const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const stripe = require('stripe')('sk_test_your_stripe_secret_key'); // Înlocuiește cu cheia ta Stripe
const multer = require('multer');
const cloudinary = require('cloudinary').v2;

const app = express();
const port = 3000;

// Configurare Cloudinary
cloudinary.config({
    cloud_name: 'your_cloud_name',
    api_key: 'your_api_key',
    api_secret: 'your_api_secret'
});

// Middleware pentru parsearea JSON
app.use(bodyParser.json());

// Conexiune la MongoDB
mongoose.connect('mongodb://localhost:27017/shopdb', {
    useNewUrlParser: true,
    useUnifiedTopology: true
}, () => {
    console.log('Conectat la MongoDB');
});

// Modele de date
const Product = mongoose.model('Product', new mongoose.Schema({
    name: String,
    price: Number,
    description: String,
    imageUrl: String,
    stock: Number
}));

const User = mongoose.model('User', new mongoose.Schema({
    email: String,
    password: String
}));

const Order = mongoose.model('Order', new mongoose.Schema({
    userId: mongoose.Schema.Types.ObjectId,
    products: Array,
    totalPrice: Number,
    status: { type: String, default: 'Pending' }
}));

// Configurare Multer pentru încărcarea pozelor
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, 'uploads/');
    },
    filename: (req, file, cb) => {
        cb(null, Date.now() + file.originalname);
    }
});

const upload = multer({ storage });

// Rute backend

// Autentificare utilizator
app.post('/api/login', async (req, res) => {
    const { email, password } = req.body;
    const user = await User.findOne({ email });

    if (!user) return res.status(400).send('Utilizatorul nu a fost găsit.');

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(400).send('Parola incorectă.');

    const token = jwt.sign({ userId: user._id }, 'secretkey', { expiresIn: '1h' });
    res.json({ token });
});

// Adăugare produs (admin)
app.post('/api/products', upload.single('image'), async (req, res) => {
    const { name, price, description, stock } = req.body;
    const image = await cloudinary.uploader.upload(req.file.path);

    const newProduct = new Product({
        name,
        price,
        description,
        imageUrl: image.secure_url,
        stock
    });

    await newProduct.save();
    res.status(201).json(newProduct);
});

// Obține produse
app.get('/api/products', async (req, res) => {
    const products = await Product.find();
    res.json(products);
});

// Procesare plată (Stripe)
app.post('/api/checkout', async (req, res) => {
    const { productIds, userId } = req.body;
    const products = await Product.find({ '_id': { $in: productIds } });
    const totalPrice = products.reduce((total, product) => total + product.price, 0);

    const order = new Order({ userId, products, totalPrice });
    await order.save();

    const session = await stripe.checkout.sessions.create({
        payment_method_types: ['card'],
        line_items: products.map(product => ({
            price_data: {
                currency: 'ron',
                product_data: {
                    name: product.name
                },
                unit_amount: product.price * 100 // Stripe price in cents
            },
            quantity: 1
        })),
        mode: 'payment',
        success_url: 'http://localhost:3000/success',
        cancel_url: 'http://localhost:3000/cancel'
    });

    res.json({ url: session.url });
});

// Pornirea serverului
app.listen(port, () => {
    console.log(Serverul rulează pe http://localhost:${port});
});